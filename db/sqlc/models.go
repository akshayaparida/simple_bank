// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type CurrencyEnum string

const (
	CurrencyEnumUSD CurrencyEnum = "USD"
	CurrencyEnumEUR CurrencyEnum = "EUR"
	CurrencyEnumINR CurrencyEnum = "INR"
	CurrencyEnumGBP CurrencyEnum = "GBP"
	CurrencyEnumJPY CurrencyEnum = "JPY"
)

func (e *CurrencyEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CurrencyEnum(s)
	case string:
		*e = CurrencyEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for CurrencyEnum: %T", src)
	}
	return nil
}

type NullCurrencyEnum struct {
	CurrencyEnum CurrencyEnum `json:"currency_enum"`
	Valid        bool         `json:"valid"` // Valid is true if CurrencyEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCurrencyEnum) Scan(value interface{}) error {
	if value == nil {
		ns.CurrencyEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CurrencyEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCurrencyEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CurrencyEnum), nil
}

type TransferStatus string

const (
	TransferStatusPending   TransferStatus = "pending"
	TransferStatusCompleted TransferStatus = "completed"
	TransferStatusFailed    TransferStatus = "failed"
	TransferStatusReversed  TransferStatus = "reversed"
)

func (e *TransferStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransferStatus(s)
	case string:
		*e = TransferStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TransferStatus: %T", src)
	}
	return nil
}

type NullTransferStatus struct {
	TransferStatus TransferStatus `json:"transfer_status"`
	Valid          bool           `json:"valid"` // Valid is true if TransferStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransferStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TransferStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransferStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransferStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransferStatus), nil
}

type Account struct {
	ID        int64              `db:"id" json:"id"`
	Owner     string             `db:"owner" json:"owner"`
	Balance   int64              `db:"balance" json:"balance"`
	Currency  CurrencyEnum       `db:"currency" json:"currency"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Entry struct {
	ID        int64              `db:"id" json:"id"`
	AccountID int64              `db:"account_id" json:"account_id"`
	Amount    int64              `db:"amount" json:"amount"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type Transfer struct {
	ID            int64              `db:"id" json:"id"`
	FromAccountID int64              `db:"from_account_id" json:"from_account_id"`
	ToAccountID   int64              `db:"to_account_id" json:"to_account_id"`
	Amount        int64              `db:"amount" json:"amount"`
	Status        TransferStatus     `db:"status" json:"status"`
	Reason        pgtype.Text        `db:"reason" json:"reason"`
	CreatedAt     pgtype.Timestamptz `db:"created_at" json:"created_at"`
}
